<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on nwidger </title>
    <link>http://nwidger.github.io/blogpost.xml</link>
    <language>en-us</language>
    <author>Niels Widger</author>
    <rights>Copyright (c) 2013, Niels Widger; all rights reserved.</rights>
    <updated>2013-12-28 00:00:00 &#43;0000 UTC</updated>
    
    <item>
      <title>Writing an NES emulator in Go, Part 1</title>
      <link>http://nwidger.github.io/post/writing-an-nes-emulator-in-go-part-1/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 UTC</pubDate>
      <author>Niels Widger</author>
      <guid>http://nwidger.github.io/post/writing-an-nes-emulator-in-go-part-1/</guid>
      <description>&lt;h2&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve decided to write my own NES emulator in Go.  I know that many,
many NES emulators have been written over the years
(&lt;a href=&#34;https://github.com/scottferg/Fergulator/&#34;&gt;at least one&lt;/a&gt; written in
Go), but I&amp;rsquo;ve always wanted to try writing my own emulator after using
them for many years.  Plus it gives me a good reason to program in Go
some more.  I plan to do a post every so often as the emulator
progresses.  Hopefully I don&amp;rsquo;t lose interest half-way through!  I&amp;rsquo;ll
be putting the source code for the project up on
&lt;a href=&#34;https://github.com/nwidger/65go2&#34;&gt;this GitHub&lt;/a&gt; repository.&lt;/p&gt;

&lt;h2&gt;Architecture&lt;/h2&gt;

&lt;p&gt;My first task is to write a simulator for the CPU used by the NES, the
MOS 6502.  The 6502 chip used in the NTSC NES runs at 1.789773Mhz, or
1,789,773 cycles per second.  The NES&amp;rsquo;s 6502 does not support decimal
mode, meaning a few instructions don&amp;rsquo;t need to be supported which is
goood.&lt;/p&gt;

&lt;p&gt;The MOS 6502 is an 8-bit processor with 16-bit addresses
(little-endian, so it expects the least significant byte of each
16-bit address to be stored first in memory).  It has no I/O lines, so
any I/O registers must be mapped into the 16-bit address space.  A
full listing of the 6502&amp;rsquo;s instruction set can be found
&lt;a href=&#34;http://www.obelisk.demon.co.uk/6502/registers.html&#34;&gt;here&lt;/a&gt; and
&lt;a href=&#34;http://www.6502.org/tutorials/6502opcodes.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Registers&lt;/h2&gt;

&lt;p&gt;All registers are 8-bit unless otherwise noted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Accumulator (&lt;code&gt;A&lt;/code&gt;) - The &lt;code&gt;A&lt;/code&gt; register is used for all arithmetic and
logic instructions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Index Register 1 &amp;amp; 2 (&lt;code&gt;X&lt;/code&gt; &amp;amp; &lt;code&gt;Y&lt;/code&gt;) - Registers &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are used
for indirect addressing and also as counters/indexes.  &lt;code&gt;X&lt;/code&gt; is used
by certain instructions to save/restore the value of &lt;code&gt;P&lt;/code&gt; using the
stack.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stack Pointer (&lt;code&gt;SP&lt;/code&gt;) - Stores the least-significant byte of the top
of the stack.  The 6502&amp;rsquo;s stack is hardwired to occupy &lt;code&gt;$0100&lt;/code&gt; -
&lt;code&gt;$01ff&lt;/code&gt; with &lt;code&gt;SP&lt;/code&gt; initalized to &lt;code&gt;$ff&lt;/code&gt; at power-up.  If the value of
&lt;code&gt;SP&lt;/code&gt; is &lt;code&gt;$84&lt;/code&gt; then the top of the stack is located at &lt;code&gt;$0184&lt;/code&gt;.  The
top of the stack moves downward in memory as values are pushed and
upward as values are popped.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Program Counter (&lt;code&gt;PC&lt;/code&gt;) - The only 16-bit register on the 6502, &lt;code&gt;PC&lt;/code&gt;
points to the next instruction to execute.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Processor Status (&lt;code&gt;P&lt;/code&gt;) - The bits in &lt;code&gt;P&lt;/code&gt; indicate the results of the
last arithmetic and logic instructions as well as indicate if a
break/interrupt instruction has just been executed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bit 0 - Carry Flag (&lt;code&gt;C&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Bit 1 - Zero Flag (&lt;code&gt;Z&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Bit 2 - Interrupt Disable (&lt;code&gt;I&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Bit 3 - Decimal Mode (&lt;code&gt;D&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Bit 4 - Break Command (&lt;code&gt;B&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Bit 5 - -UNUSED-&lt;/li&gt;
&lt;li&gt;Bit 6 - Overflow Flag (&lt;code&gt;O&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Bit 7 - Negative Flag (&lt;code&gt;N&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on the 6502&amp;rsquo;s registers can be found
&lt;a href=&#34;http://www.obelisk.demon.co.uk/6502/registers.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Memory Map&lt;/h2&gt;

&lt;p&gt;The 6502&amp;rsquo;s memory layout is very simple.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$0000&lt;/code&gt; - &lt;code&gt;$00ff&lt;/code&gt; - Used by zero page addressing instructions.
Instructions using zero page addressing only require an 8-bit
address parameter.  The most-signficant 8-bits of the address are
assumed to be &lt;code&gt;$00&lt;/code&gt;.  This is done to save memory since the address
requires half the space.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$0100&lt;/code&gt; - &lt;code&gt;$01ff&lt;/code&gt; - Reserved for the system stack.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$0200&lt;/code&gt; - &lt;code&gt;$fff9&lt;/code&gt; - Unspecified&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;fff$a&lt;/code&gt; - &lt;code&gt;$fffb&lt;/code&gt; - Contains address of non-maskable interrupt (NMI) handler&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$fffc&lt;/code&gt; - &lt;code&gt;$fffd&lt;/code&gt; - Contains address of reset location&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;$fffe&lt;/code&gt; - &lt;code&gt;$ffff&lt;/code&gt; - Contains address of BRK/IRQ handler&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Implementing the CPU is simply a matter of creating a representation
of the CPU&amp;rsquo;s internals and input/output lines and then writing
functions which implement the 6502&amp;rsquo;s instruction set.&lt;/p&gt;

&lt;h3&gt;Memory&lt;/h3&gt;

&lt;p&gt;Memory can simply be a 65,536 (16-bit address bus, so &lt;code&gt;2^16&lt;/code&gt;
addresses) element &lt;code&gt;uint8&lt;/code&gt; array.  Reads/writes to memory merely get
and set elements in the array.  For now I will use a very simple
&lt;code&gt;BasicMemory&lt;/code&gt; type to emulate the 6502&amp;rsquo;s RAM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Memory interface {
    reset()
    fetch(address uint16) (value uint8)
    store(address uint16, value uint8) (oldValue uint8)
}

type BasicMemory [65536]uint8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to handle the memory mapping done by the NES, I will need to
create an &lt;code&gt;NESMemory&lt;/code&gt; type which implements the &lt;code&gt;Memory&lt;/code&gt; interface but
whose &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;store&lt;/code&gt; functions understand the NES&amp;rsquo;s memory
layout.  Specifically, a number of memory ranges are either mirrored
to other memory ranges, memory mapped to registers of the PPU (Picture
Processing Unit) and APU (Audio Processing Unit), or mapped to the
actual NES cartridge.  See
&lt;a href=&#34;http://wiki.nesdev.com/w/index.php/CPU_memory_map&#34;&gt;here&lt;/a&gt; for details.&lt;/p&gt;

&lt;h3&gt;CPU&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Cpu&lt;/code&gt; type stores the 6502&amp;rsquo;s registers and instruction table as
well as a clock input and a link off to memory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Status uint8

const (
    C Status = 1 &amp;lt;&amp;lt; iota // carry flag
    Z                    // zero flag
    I                    // interrupt disable
    D                    // decimal mode
    B                    // break command
    _                    // -UNUSED-
    V                    // overflow flag
    N                    // negative flag
)

type Registers struct {
    A  uint8  // accumulator
    X  uint8  // index register X
    Y  uint8  // index register Y
    P  Status // processor status
    SP uint8  // stack pointer
    PC uint16 // program counter
}

type Cpu struct {
    clock        Clock
    registers    Registers
    memory       Memory
    instructions InstructionTable
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Fetch/Execute Cycle&lt;/h3&gt;

&lt;p&gt;The fetch/execute cycle of the emulator fetches the instruction at the
address stored in the &lt;code&gt;PC&lt;/code&gt; register, looks up the opcode in its
instruction table and then executes it.  Each instruction should be in
charge of modifying the stack/registers/memory appropriately as well
as incrementing the &lt;code&gt;PC&lt;/code&gt; register appropriately for the number of
parameters (or using the value of the parameters, in the case of
branching instructions).  Each instruction also needs to determine how
many clock cycles it should use up, since some instructions take
different number of clock cycles depending on their parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (cpu *Cpu) Execute() {
    // fetch
    opcode := OpCode(cpu.memory.fetch(cpu.registers.PC))
    inst, ok := cpu.instructions[opcode]

    if !ok {
        fmt.Printf(&amp;quot;No such opcode 0x%x\n&amp;quot;, opcode)
        os.Exit(1)
    }

    // execute, exec() returns number of cycles
    cycles := inst.exec(cpu)

    // count cycles
    for _ = range cpu.clock.ticker.C {
        cycles--

        if cycles == 0 {
            break
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Clock&lt;/h3&gt;

&lt;p&gt;One tricky point in the implementation is going to be timing.  For the
6502 to interact properly with other components of the NES such as the
PPU and APU, it must execute instructions in a specific amount of time
and stay in sync with the master clock.  According to the 6502
specification, each instruction takes a deterministic number of clock
cycles to execute.  Since it can probably be taken for granted that a
modern machine will be able to execute each instruction faster than a
real 6502 chip, the emulator will need to throttle the CPU to ensure
it does not execute too quickly.  I plan to look into Go&amp;rsquo;s
&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;time&lt;/a&gt; package, specifically the Ticker
data type, to implement the clock signal used by the 6502.  This is
definitely the part I&amp;rsquo;m worried about the most.&lt;/p&gt;

&lt;h2&gt;Up Next&lt;/h2&gt;

&lt;p&gt;I have the basic architecture written, but so far I&amp;rsquo;ve only
implemented the &lt;code&gt;LDA&lt;/code&gt; instruction.  After implementing the rest of the
instruction set I will need to write a number of unit tests to ensure
everything is working properly.  This should give me a chance to try
out Go&amp;rsquo;s
&lt;a href=&#34;http://golang.org/doc/code.html#Testing&#34;&gt;unit testing framework&lt;/a&gt;,
specifically Go 1.2&amp;rsquo;s new
&lt;a href=&#34;http://golang.org/doc/go1.2#cover&#34;&gt;test coverage&lt;/a&gt; features (here&amp;rsquo;s a
great &lt;a href=&#34;http://blog.golang.org/cover&#34;&gt;blog post&lt;/a&gt; about the feature).&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been using the following sites to help in implementing the 6502
and learn about the internals of the NES.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nesdev.com/&#34;&gt;NESDev Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.6502.org/tutorials/6502opcodes.html&#34;&gt;6502.org NMOS 6502 Opcodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.obelisk.demon.co.uk/6502/index.html&#34;&gt;6502 Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Neeman-Marcus Cookies</title>
      <link>http://nwidger.github.io/post/neeman-marcus-cookies</link>
      <pubDate>Sat, 21 Dec 2013 00:00:00 UTC</pubDate>
      <author>Niels Widger</author>
      <guid>http://nwidger.github.io/post/neeman-marcus-cookies</guid>
      <description>&lt;p&gt;I got this recipe from my father who used to make these all the time.
I&amp;rsquo;ve made them for various events the last few years and people seem
to like them.&lt;/p&gt;

&lt;div class=&#34;thumbnail&#34;&gt;
  &lt;a href=&#39;/images/neeman-marcus-cookies.jpg&#39; data-lightbox=&#39;cookies&#39; title=&#39;Om nom nom&#39;&gt;&lt;img src=&#39;/images/neeman-marcus-cookies.jpg&#39;&gt;&lt;/a&gt;

  
  &lt;div class=&#34;caption&#34;&gt;
    &lt;p&gt;
      Om nom nom
    &lt;/p&gt;
  &lt;/div&gt;
  

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;Ingredients&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;no-highlight&#34;&gt;4 eggs - beaten \ whip together by
1c oil          / drizzling in slowly
2c sugar
2c brown sugar
5c oats (rolled or ground)
4c flour
2 tsp baking soda
2 tsp baking powder
1 1/2 tsp salt
2 tsp vanilla
2c chocolate chips
3c nuts (optional)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Directions&lt;/h2&gt;

&lt;p&gt;Add all the dry ingredients together in a mixer and stir them
together.  Whip the eggs, oil and vanilla together separately and then
add it slowly to the dry ingredients in the mixer as it runs.&lt;/p&gt;

&lt;p&gt;Depending on how many cookies I need, I use either a &amp;frac12; cup or &amp;frac14;
cup scoop for each cookie.  Bake on greased cookie sheets at 375F for
~10 minutes.  On our oven, I usually do around 12 minutes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running form focuses</title>
      <link>http://nwidger.github.io/post/running-form-focuses/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 UTC</pubDate>
      <author>Niels Widger</author>
      <guid>http://nwidger.github.io/post/running-form-focuses/</guid>
      <description>&lt;p&gt;This post lays out the form focuses I try to concentrate on when I&amp;rsquo;m
out for a run.  A lot of the core ideas are from the
&lt;a href=&#34;http://www.chirunning.com/&#34;&gt;ChiRunning&lt;/a&gt; method.  I have also found
that &lt;a href=&#34;http://fellrnr.com/wiki/Main_Page&#34;&gt;fellrnr&amp;rsquo;s Wiki&lt;/a&gt; has a ton of
valuable running information, including running form.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve laid out my form focuses by body part, from the feet to the head.&lt;/p&gt;

&lt;h2&gt;Breathing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Inhale through your nose, exhale through your mouth.  If you can do
all your breathing through your nose, even better.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Time your breathing with your footfalls.  Inhale for 4 steps and
then exhale for 3 steps.  Increase this to inhale for 3 steps,
exhale for 2 steps for faster paces/hills.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lower Body&lt;/h2&gt;

&lt;h3&gt;Legs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Let your legs swing out behind your hips rather than in front.
Don&amp;rsquo;t pull your legs in front of your hips during your stride as
this will likely lead to heal striking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Feet&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t splay your feet, keep the toes of both feet pointed forward in
the direction you wish to travel.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Land on your midfoot instead of your heel with your foot underneath
your hips.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Aim for a cadence of 90 spm (steps per minute) per foot, or 180 spm
if you&amp;rsquo;re counting footfalls on both feet.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Relax your feet, don&amp;rsquo;t push off with your toes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Peel&amp;rdquo; your feet off the ground starting from your heel.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Ankles&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Lean forward from your ankles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Knees&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Land with your knees slightly bent&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keep your knees down, don&amp;rsquo;t lift your legs up.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Hips&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keep your pelvis level by pulling your tailbone in using your core
muscles.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow a slight rotation in your hip during your stride, but keep the
rotation isolated to your hips/back and not your upper body.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Back&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keep your back straight, don&amp;rsquo;t hunch.  Imagine a line going from the
top of your head, down through your tail bone to your heels and try
to keep that line straight.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Upper Body&lt;/h2&gt;

&lt;h3&gt;Shoulders&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keep your shoulders relaxed, don&amp;rsquo;t hunch your shoulders up or pull
them back.  Don&amp;rsquo;t rotate your shoulders as you run, instead keep
them perpendicular to the direction you wish to travel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Arms&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Allow your arms to hang loosely from their sockets.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bend your arms at 45-90 degree angles&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keep your arms tucked in at your sides&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Swing your arms forward to back, parallel to the direction you wish
to travel.  Don&amp;rsquo;t swing your arms laterally.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keep your swing motion restricted so that your hand doesn&amp;rsquo;t go
behind your torso on the back swing and your elbow doesn&amp;rsquo;t go in
front of your torso on the forward swing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Head/Neck&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keep your chin down and your head back, imagine the straight line
going from your head to your toes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t stare at your feet, keep your head up looking at the road in
front of you.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Making a reveal.js presentation with org-reveal</title>
      <link>http://nwidger.github.io/post/making-a-reveal.js-presentation-with-org-reveal/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 UTC</pubDate>
      <author>Niels Widger</author>
      <guid>http://nwidger.github.io/post/making-a-reveal.js-presentation-with-org-reveal/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m currently working on putting together the presentation for my
thesis defense and like all other things I wanted to put it together
inside Emacs.  I had heard of
&lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;reveal.js&lt;/a&gt; and wanted to give
it a shot for a while, and fortunately someone made
&lt;a href=&#34;https://github.com/yjwen/org-reveal&#34;&gt;org-reveal&lt;/a&gt; which allows
exporting an &lt;a href=&#34;http://orgmode.org&#34;&gt;org-mode&lt;/a&gt; file to a reveal.js
presentation.  Here&amp;rsquo;s how I put together my presentation.&lt;/p&gt;

&lt;h2&gt;Create your presentation directory&lt;/h2&gt;

&lt;p&gt;First make a directory to hold your presentation file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mkdir presentation
cd presentation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;create a directory inside to hold any images you may use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;mkdir images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;create a &lt;code&gt;presentation.css&lt;/code&gt; file to store any custom CSS rules you may
need:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;touch presentation.css
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Install org-reveal&lt;/h2&gt;

&lt;p&gt;Obviously, &lt;code&gt;org-reveal&lt;/code&gt; requires &lt;code&gt;org&lt;/code&gt;.  &lt;code&gt;org&lt;/code&gt; ships with Emacs by
default, but I install it out of &lt;a href=&#34;http://melpa.milkbox.net/#/&#34;&gt;MELPA&lt;/a&gt;
to ensure I&amp;rsquo;m running the latest version.  To install &lt;code&gt;org&lt;/code&gt; and
&lt;code&gt;org-reveal&lt;/code&gt;, first add MELPA to your package repositories in your
Emacs init file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;lisp&#34;&gt;(package-initialize)
    
(add-to-list &#39;package-archives
         &#39;(&amp;quot;melpa&amp;quot; . &amp;quot;http://melpa.milkbox.net/packages/&amp;quot;) t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Evaluate that code with &lt;code&gt;eval-region&lt;/code&gt; or just restart Emacs.  Make
sure your package list is up to date by running &lt;code&gt;M-x
package-refresh-contents&lt;/code&gt;, then run &lt;code&gt;M-x package-install org RET&lt;/code&gt; and
then &lt;code&gt;M-x package-install ox-reveal RET&lt;/code&gt; to install both packages.&lt;/p&gt;

&lt;p&gt;I added the following to my Emacs init file to ensure they both get
loaded on startup (add this &lt;em&gt;after&lt;/em&gt; the call to &lt;code&gt;package-initialize&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;lisp&#34;&gt;(require &#39;org)
(require &#39;ox-reveal)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Install reveal.js&lt;/h2&gt;

&lt;p&gt;Next download the latest
&lt;a href=&#34;https://github.com/hakimel/reveal.js/releases&#34;&gt;reveal.js release&lt;/a&gt;
tarball and extract it to the &lt;code&gt;presentation&lt;/code&gt; directory.  Rename the
resulting directory to &lt;code&gt;reveal.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;wget https://github.com/hakimel/reveal.js/archive/2.6.1.tar.gz
tar xfz 2.6.1.tar.gz
mv reveal.js-2.6.1 reveal.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go into the &lt;code&gt;reveal.js&lt;/code&gt; directory and use &lt;code&gt;npm&lt;/code&gt; to download the
necessary dependencies (&lt;code&gt;reveal.js&lt;/code&gt; requires
&lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; and
&lt;a href=&#34;http://gruntjs.com/getting-started#installing-the-cli&#34;&gt;Grunt&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cd reveal.js
sudo npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;follow the
&lt;a href=&#34;https://github.com/hakimel/reveal.js/#installation&#34;&gt;reveal.js install instructions&lt;/a&gt;
if you run into any problems here.&lt;/p&gt;

&lt;h2&gt;Create presentation file&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;presentation.org&lt;/code&gt; file and add the following header to the
top:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;no-highlight&#34;&gt;#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:1
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: night
#+REVEAL_HLEVEL: 999
#+REVEAL_EXTRA_CSS: ./presentation.css

#+TITLE: My Title Goes Here
#+AUTHOR: Your Name Goes Here
#+EMAIL: your.email@goes.here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will probably want to play around with &lt;code&gt;REVEAL_THEME&lt;/code&gt; (choices
&lt;a href=&#34;https://github.com/hakimel/reveal.js/#theming&#34;&gt;here&lt;/a&gt;), &lt;code&gt;REVEAL_TRANS&lt;/code&gt;
(the slide transition effect, must be one of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;cube&lt;/code&gt;,
&lt;code&gt;page&lt;/code&gt;, &lt;code&gt;concave&lt;/code&gt;, &lt;code&gt;zoom&lt;/code&gt;, &lt;code&gt;linear&lt;/code&gt;, &lt;code&gt;fade&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;) and
&lt;code&gt;REVEAL_HLEVEL&lt;/code&gt;.  I set &lt;code&gt;REVEAL_HLEVEL&lt;/code&gt; to 999 so that all slides are
horizontal, see &lt;a href=&#34;https://github.com/yjwen/org-reveal#the-hlevel&#34;&gt;here&lt;/a&gt;
for details.  Note the &lt;code&gt;REVEAL_EXTRA_CSS&lt;/code&gt; option which pulls in any
extra CSS rules you&amp;rsquo;ve added to your &lt;code&gt;presentation.css&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now you can start creating your presentation.  Each heading
corresponds to a new slide.&lt;/p&gt;

&lt;h3&gt;Images&lt;/h3&gt;

&lt;p&gt;Images can be inserted into your presentation like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;no-highlight&#34;&gt;[[./images/myimage.png]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can use put &lt;code&gt;#+ATTR_HTML :attr1 attr1_value, :attr2 attr2_value&lt;/code&gt;
above the image link to add custom HTML attributes, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;no-highlight&#34;&gt;#+ATTR_HTML: :height 200%, :width 200%
[[./images/myimage.png]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Tables&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;org&lt;/code&gt; tables are also exported properly, although I found they look
better when stretched to fill the screen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;no-highlight&#34;&gt;#+ATTR_HTML: :width 100%
| column_title1  | column_title2 |
|----------------+---------------|
| a              | b             |
| a              | b             |
| a              | b             |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also added a few custom rules to &lt;code&gt;presentation.css&lt;/code&gt; to center the
table text and put a border around the cells:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;.reveal table th, .reveal table td {
    text-align: center;
    border: 1px solid white;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Code Fragments&lt;/h3&gt;

&lt;p&gt;You can insert source code between &lt;code&gt;#+BEGIN_SRC&lt;/code&gt; and &lt;code&gt;#+END_SRC&lt;/code&gt;.  If
you specify the language you get awesome syntax highlighting for free
thanks to &lt;code&gt;org-babel&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;class MyClass extends Object {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found that the code blocks weren&amp;rsquo;t displaying correctly due to the
&lt;code&gt;pre&lt;/code&gt; blocks being set to &lt;code&gt;width: 90%&lt;/code&gt;.  I fixed this by adding the
following rule to my &lt;code&gt;presentation.css&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;css&#34;&gt;.reveal pre {
    width: 100%;
    border: none;
    box-shadow: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Speaker&amp;rsquo;s notes&lt;/h3&gt;

&lt;p&gt;You can add speaker&amp;rsquo;s notes to each slide between &lt;code&gt;#+BEGIN_NOTES&lt;/code&gt; and
&lt;code&gt;#+END_NOTES&lt;/code&gt;.  While viewing your presentation, press &lt;code&gt;s&lt;/code&gt; to pull up
the speaker&amp;rsquo;s window to see your notes.&lt;/p&gt;

&lt;h2&gt;Generate the presentation&lt;/h2&gt;

&lt;p&gt;Generate your presentation by running &lt;code&gt;C-c C-e R R&lt;/code&gt;.  Once it&amp;rsquo;s
finished, there should be a new &lt;code&gt;presentation.html&lt;/code&gt; file.  Just open
it in your browser to view your presentation!  Press &lt;code&gt;f&lt;/code&gt; to go
fullscreen or &lt;code&gt;Esc&lt;/code&gt; to see the slide overview.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
